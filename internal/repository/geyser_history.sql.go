// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: geyser_history.sql

package repository

import (
	"context"
	"time"
)

const getGeyserHistoryCount = `-- name: GetGeyserHistoryCount :one
select count(*) from geyser_history
`

func (q *Queries) GetGeyserHistoryCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getGeyserHistoryCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getGeyserHistoryPaginated = `-- name: GetGeyserHistoryPaginated :many
select gh.id, gh.action, gh.resident_key, gh.created_at , r.display_name as display_name from geyser_history gh join residents r on r.` + "`" + `key` + "`" + ` = gh.resident_key order by created_at desc limit? offset?
`

type GetGeyserHistoryPaginatedParams struct {
	Limit  int32
	Offset int32
}

type GetGeyserHistoryPaginatedRow struct {
	ID          int32
	Action      string
	ResidentKey string
	CreatedAt   time.Time
	DisplayName string
}

func (q *Queries) GetGeyserHistoryPaginated(ctx context.Context, arg GetGeyserHistoryPaginatedParams) ([]GetGeyserHistoryPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getGeyserHistoryPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGeyserHistoryPaginatedRow
	for rows.Next() {
		var i GetGeyserHistoryPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.ResidentKey,
			&i.CreatedAt,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGeyserHistory = `-- name: InsertGeyserHistory :exec
insert into geyser_history (` + "`" + `action` + "`" + `, resident_key) values (?, ?)
`

type InsertGeyserHistoryParams struct {
	Actionvalue string
	Userkey     string
}

func (q *Queries) InsertGeyserHistory(ctx context.Context, arg InsertGeyserHistoryParams) error {
	_, err := q.db.ExecContext(ctx, insertGeyserHistory, arg.Actionvalue, arg.Userkey)
	return err
}
